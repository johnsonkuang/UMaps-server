CSE 331 Homework.  Answers to written questions.
Edit this file to supply your answers.

Name:  Johnson Kuang

Part 1. (Written exercises)

(a)
    (i) IntQueue1:
            Abstraction Function:
                The Nth element from the front of the queue = elements[N-1]
                where the 1st element is at the elements[0]

             Rep Invariant:
                entries != null && no element in entries != null
    (ii) IntQueue2:
            Abstraction Function:
                The Nth element from the front of the queue = elements[(front + N-1) % entries.length] where the
                first element is at the elements[front % entries.length]

            Rep Invariant:
                entries != null &&
                elements[(front-1)%entries.length...(front+N-1)%entries.length] != null &&
                0 <= front < entries.length &&
                size <= entries.length

(b) Group 1: A, D, G | Group 2: B, H | Group 3: C, F | Group 4: E


(c)
    (i) The method does not expose representation because it returns a primitive int type.
    (ii) The method could have returned a reference to an internal field, so it exposed representation.
    (iii) The method is a private method within the class therefore it does not expose representation.
    (iv) The method returns a string, which is immutable, therefore it does not expose representation.
    (v) Iterators are immutable but the objects you're iterating through are. If the iterator was derived from an internal
        field then it does expose representation. Otherwise it doesn't.
    (vi) Depending on if the cards parameter is used as an internal field, this method exposes representation because the client
         can modify the list via cards to change the cards stored in the Deck object.

Part 2.  (Graph interface/operations)

In the Graph ADT the client is responsible for creating nodes that will be included in the Graph.
Node is public for this reason and includes public operations to add edges. The Graph ADT includes
operations to add nodes, add edges, and observer methods that get all the nodes in the graph and list out
the nodes and children of nodes in string representations. These operations are sufficient creating a fully functional
directed labeled graph as outlined in the specs. We do not include operations to remove nodes or edges because this
graph adt is not intended to be dynamic. The client can create new instances of the graph with their changes made. The
abstract definition of a directed labeled graph does not necessarily require the inclusion of full changeability of nodes
and edges.

We include a Node class as well to allow the client to manipulate and access the graph ADT in a more specific way. The client
is responsible for specifying the nodes in the graph and the graph provides operations to support the connections between these
nodes.


Part 3.  (Testing strategy)
documenting and explaining your testing strategy. Mention how your specification tests differ from your
implementation tests (if they do) and why

In the specification tests, the testing philosophy is to confirm whether the Graph ADT is capable of adequately representing
11 different cases of a directed labeled graph. These specification tests were used to test whether the graph was capable
of creating an empty graph, with one node,  with two isolated nodes, with two connected nodes, with a parent node and
multiple children nodes, with circularly linked nodes, with a node connected to itself via an edge, and other cases.
Each of these cases have the same abstract value therefore the Graph ADT should be able to support these cases without issue.

In the implementation tests, the testing philosophy was to verify the individual implementation behavior of each method
in the Graph class and the Node class. Because there were several elements in the Graph ADT spec that left behavior undefined
in certain cases, these implementation tests were aimed at verifying this behavior.

The specification tests differ from the implementation tests because the former tests that the Graph ADT is able to fulfill
the abstract representation of a directed labeled graph, while the latter tests that the specific implementation and behavior
of each method is correct and accurate. One tests for spec adherence while the other tests for implementation details.


